
#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Create interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ Mintlify Deployment Tool');
console.log('===========================');

// Check if Mintlify CLI is installed
function checkMintlifyInstalled() {
  try {
    execSync('mintlify --version', { stdio: 'ignore' });
    return true;
  } catch (error) {
    return false;
  }
}

// Main function
async function main() {
  // Check if mintlify is installed
  const isMintlifyInstalled = checkMintlifyInstalled();
  
  if (!isMintlifyInstalled) {
    console.log('‚ö†Ô∏è  Mintlify CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    rl.question('–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Mintlify CLI –≥–ª–æ–±–∞–ª—å–Ω–æ? (y/n): ', (answer) => {
      if (answer.toLowerCase() === 'y') {
        try {
          console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mintlify CLI...');
          execSync('npm install -g mintlify', { stdio: 'inherit' });
          console.log('‚úÖ Mintlify CLI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
          proceedWithDeployment();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Mintlify CLI:', error.message);
          rl.close();
        }
      } else {
        console.log('‚ùå Mintlify CLI —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–µ–ø–ª–æ—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        rl.close();
      }
    });
  } else {
    proceedWithDeployment();
  }
}

// Function to handle deployment
function proceedWithDeployment() {
  console.log('‚öôÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ –¥–µ–ø–ª–æ—é...');
  
  try {
    // Run the documentation generation script
    execSync('node scripts/generate-docs.js --sync --changelog', { stdio: 'inherit' });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ Mintlify...');
    rl.question('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/n): ', (answer) => {
      if (answer.toLowerCase() === 'y') {
        try {
          execSync('mintlify deploy', { stdio: 'inherit' });
          console.log('‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
          console.log('üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
          
          // Update last deploy time
          const deployTime = Date.now().toString();
          console.log(`–í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: ${new Date(parseInt(deployTime)).toLocaleString()}`);
          console.log('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Mintlify.');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
        }
        rl.close();
      } else {
        console.log('‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω.');
        rl.close();
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', error.message);
    rl.close();
  }
}

// Run the script
main();
